{"version":3,"file":"warehouse.services.js","sourceRoot":"","sources":["../../../src/shared/warehouse.services.ts"],"names":[],"mappings":"AAIA,MAAM,UAAU,GAAG,wBAAwB,CAAC;AAE5C,MAAM,CAAC,KAAK,UAAU,aAAa;IACjC,OAAO,MAAM,OAAO,CAAC,GAAG,CAAC;QACvB,KAAK,CAAC,GAAG,UAAU,WAAW,CAAC;QAC/B,KAAK,CAAC,GAAG,UAAU,WAAW,CAAC;QAC/B,KAAK,CAAC,GAAG,UAAU,QAAQ,CAAC;KAC7B,CAAC;SACC,IAAI,CAAC,SAAS,CAAC,EAAE;QAChB,OAAO,OAAO,CAAC,GAAG,CAChB,SAAS,CAAC,GAAG,CAAC,UAAU,QAAQ;YAC9B,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;QACzB,CAAC,CAAC,CACH,CAAC;IACJ,CAAC,CAAC;SACD,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC,EAAE,EAAE;QACpC,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;QACzC,wBAAwB;QACxB,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAyB,EAAE,EAAE;;YAAC,OAAA,CAAC;gBAClD,GAAG,OAAO;gBACV,QAAQ,QAAE,OAAO,CAAC,QAAQ,0CAAE,GAAG,CAAC,OAAO,CAAC,EAAE;;oBAAC,OAAA,CAAC;wBAC1C,GAAG,OAAO;wBACV,IAAI,QAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAY,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,OAAO,CAAC,EAAE,CAAC,0CAAE,IAAI;qBACnE,CAAC,CAAA;iBAAA,CAAC;gBACH,aAAa,QAAE,OAAO,CAAC,QAAQ,0CAAE,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;oBACpD,MAAM,OAAO,GAAY,QAAQ,CAAC,IAAI,CACpC,CAAC,GAAY,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,CACrC,CAAC;oBACF,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,aAAa,KAAK,CAAC,EAAE;wBAC3C,OAAO,CAAC,CAAC;qBACV;oBAED,MAAM,WAAW,GAAS,KAAK,CAAC,IAAI,CAClC,CAAC,IAAU,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,EAAE,CAC3C,CAAC;oBACF,IAAI,WAAW,EAAE;wBACf,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAC1B,CAAC,OAAO,CAAC,aAAa,GAAG,WAAW,CAAC,UAAU,CAAC;4BAC9C,IAAI,CAAC,cAAc,CACtB,CAAC;wBACF,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;qBACnE;oBAED,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAC1B,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC,cAAc,CAC5C,CAAC;oBACF,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;gBACpE,CAAC,EAAE,CAAC,CAAC,CAAC;aACP,CAAC,CAAA;SAAA,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;IACL;;;;;;;;;;;;;;;;YAgBQ;AACV,CAAC;AACD;;;;;;;;SAQS","sourcesContent":["import { Article } from '../models/article';\nimport { Product } from '../models/product';\nimport { Sale } from '../models/sale';\n\nconst URL_PREFIX = 'http://localhost:7000/';\n\nexport async function fetchProducts(): Promise<Product[]> {\n  return await Promise.all([\n    fetch(`${URL_PREFIX}products/`),\n    fetch(`${URL_PREFIX}articles/`),\n    fetch(`${URL_PREFIX}sales/`),\n  ])\n    .then(responses => {\n      return Promise.all(\n        responses.map(function (response) {\n          return response.json();\n        })\n      );\n    })\n    .then(([products, articles, sales]) => {\n      console.log([products, articles, sales]);\n      // check type of product\n      return products.map((product: Partial<Product>) => ({\n        ...product,\n        articles: product.articles?.map(article => ({\n          ...article,\n          name: articles.find((art: Article) => art.id === article.id)?.name,\n        })),\n        amountInStock: product.articles?.reduce((acc, curr) => {\n          const article: Article = articles.find(\n            (art: Article) => art.id === curr.id\n          );\n          if (!article || article.amountInStock === 0) {\n            return 0;\n          }\n\n          const soldArticle: Sale = sales.find(\n            (sale: Sale) => sale.productId === curr.id\n          );\n          if (soldArticle) {\n            const available = Math.trunc(\n              (article.amountInStock - soldArticle.amountSold) /\n                curr.amountRequired\n            );\n            return acc > -1 ? (available < acc ? available : acc) : available;\n          }\n\n          const available = Math.trunc(\n            article.amountInStock / curr.amountRequired\n          );\n          return acc > -1 ? (available < acc ? available : acc) : available;\n        }, -1),\n      }));\n    });\n  /* return await fetch(`${URL_PREFIX}products/`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response is not ok');\n      }\n      return response.json();\n    })\n    .then(async products => {\n      const artciles = await fetch(`${URL_PREFIX}products/`);\n      const sales = await fetch(`${URL_PREFIX}products/`);\n\n      return [products, artciles.json(), sales.json()];\n    })\n    .then(data => {\n      console.log(data);\n      return data[0];\n    }); */\n}\n/* const uniqueArt = products.reduce((acc: string[], curr: Product) => {\n        curr.articles.map(article => {\n          if (!acc.includes(article.id)) {\n            acc.push(article.id);\n          }\n        });\n        return acc;\n      }, []);\n       */\n"]}